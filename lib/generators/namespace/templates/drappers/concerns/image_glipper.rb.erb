module <%= class_name %>
  module ImageGlipper
    FALLBACK_URL = 'fallback/default.png'

    def api_image_urls(*args)
      sizes = args.any? ? args : [:normal, :thumb, :small]

      Jbuilder.new do |json|
        json.original image_url
        sizes.each do |s|
          json.set! s, image_url(s)
        end
      end
    end

    def display_image(*args)
      opts = args.extract_options!
      size = args.delete_at(0)

      if image_object && image_object.photo.present?
        h.image_tag(image_url(size), opts)
      else
        h.image_tag(FALLBACK_URL, opts)
      end
    end

    def display_asset_url(options={})
      size = options.delete(:size) { nil }
      fallback = options.delete(:fallback) { true }

      if image_object && image_object.photo.present?
        h.asset_url(image_url(size))
      else
        h.asset_url(FALLBACK_URL) if fallback
      end
    end

    def display_data_url(options={})
      size = options.delete(:size) { nil }
      base64 = Base64.encode64(image_file(size)).gsub(/\s+/, "")
      "data:#{sized_image_object(size).content_type};base64,#{base64}"
    end

    def display_filename(options={})
      size = options.delete(:size) { nil }
      sized_image_object(size).filename
    end

    private def image_object
      o.image
    end

    private def sized_image_object(size=nil)
      if size
        image_object.photo.public_send(size)
      else
        image_object.photo
      end
    end

    private def image_url(size=nil)
      sized_image_object(size).url
    end

    private def image_file(size=nil)
      File.read sized_image_object(size).file.file
    end

  end
end
